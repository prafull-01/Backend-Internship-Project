const express = require('express');
const router = express.Router();
const Transaction = require('../models/transaction');
const Book = require('../models/book');
const User = require('../models/user');

// Add a new transaction when the book is issued
router.post('/issue', async (req, res) => {
  const { bookName, userId, issueDate } = req.body;
  try {
    const user = await User.findOne({ userId });
    const book = await Book.findOne({ bookName });

    if (!user || !book) return res.status(404).json({ message: 'User or Book not found' });

    const transaction = new Transaction({
      userId: user._id,
      bookId: book._id,
      issueDate: new Date(issueDate),
      returnDate: null,
      totalRent: 0
    });

    await transaction.save();
    res.json(transaction);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Update the transaction when the book is returned
router.post('/return', async (req, res) => {
  const { bookName, userId, returnDate } = req.body;
  try {
    const user = await User.findOne({ userId });
    const book = await Book.findOne({ bookName });
    const transaction = await Transaction.findOne({ bookId: book._id, userId: user._id, returnDate: null });

    if (!transaction) return res.status(404).json({ message: 'Transaction not found' });

    const daysRented = Math.ceil((new Date(returnDate) - transaction.issueDate) / (1000 * 60 * 60 * 24));
    const totalRent = daysRented * book.rentPerDay;

    transaction.returnDate = new Date(returnDate);
    transaction.totalRent = totalRent;

    await transaction.save();
    res.json(transaction);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get people who have issued the book in the past and the current status
router.get('/book/:bookName', async (req, res) => {

    const { bookName } = req.params;
    try {
        // Query the Transactions collection to find users who issued this book
        const transactions = await Transaction.find({ bookName });

        // Extract current and previous users
        const currentUser = transactions.length > 0 ? transactions[0].userId : null;
        const previousUsers = transactions.map(t => t.userId);

        res.json({
            currentUser,
            previousUsers: [...new Set(previousUsers)], // Remove duplicates
            count: transactions.length
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'An error occurred while fetching data.' });
    }
});

// Get total rent generated by a book
router.get('/rent/:bookName', async (req, res) => {
  const { bookName } = req.params; // Get the bookName from the URL parameters
    console.log(`Searching for book: ${bookName}`);
    
    try {
        const transactions = await Transaction.find({ bookName });

        // Check if there are any transactions
        if (transactions.length === 0) {
            return res.json({
                currentUser: null,
                previousUsers: [],
                count: 0
            });
        }

        const currentUser = transactions[0].userId; // Assume the first transaction has the current user
        const previousUsers = transactions.map(t => t.userId);

        res.json({
            currentUser,
            previousUsers: [...new Set(previousUsers)], // Remove duplicates
            count: transactions.length
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'An error occurred while fetching data.' });
    }
});

// Get books issued by a specific user
router.get('/user/:userId', async (req, res) => {
  try {
    const user = await User.findOne({ userId: req.params.userId });
    const transactions = await Transaction.find({ userId: user._id }).populate('bookId');
    
    const booksIssued = transactions.map(t => t.bookId.bookName);
    res.json(booksIssued);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get books issued in a date range
router.get('/date-range', async (req, res) => {
  const { startDate, endDate } = req.query;
  try {
    const transactions = await Transaction.find({
      issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
    }).populate('bookId userId');
    
    const result = transactions.map(t => ({
      bookName: t.bookId.bookName,
      issuedTo: t.userId.name
    }));
    res.json(result);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;
